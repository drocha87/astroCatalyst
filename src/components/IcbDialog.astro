---
import IcbFocusTrap from "./IcbFocusTrap.astro";
import IcbTeleport from "./IcbTeleport.astro";

type Props = {
  // the selector used to find the element in the DOM
  activator: string;
  // the event we should listen to activate the dialog
  activatorEvent: string;

  deactivator: string;
  deactivatorEvent: string;
  // TODO: add option to disallow closing the dialog when clicking on the overlay
};

const { activator, activatorEvent, deactivator, deactivatorEvent } =
  Astro.props;
---

<IcbTeleport destination="body">
  <icb-dialog
    data-activator={activator}
    data-activator-event={activatorEvent}
    data-deactivator={deactivator}
    data-deactivator-event={deactivatorEvent}
    style={{ display: "none" }}
  >
    <dialog
      data-target="icb-dialog.dialog"
      class="rounded-2xl max-w-lg bg-white p-0 border-0 backdrop:bg-gray-200/50 overflow-hidden"
    >
      <!--
        NOTE: To ensure that clicking on the backdrop closes the dialog, we need
        to implement a specific behavior. Despite the click event being
        triggered on the backdrop, the dialog will still listen to it. To
        address this, we can wrap the dialog content in a div, remove any
        padding and border, and prevent the click event from propagating from
        this div. This approach guarantees that when the dialog emits the
        'click' event, it was triggered by a click on the backdrop.
      -->
      <div class="p-8" data-action="click:icb-dialog#stopPropagation">
        <IcbFocusTrap>
          <slot name="header" />
          <slot />
          <slot name="footer" />
        </IcbFocusTrap>
      </div>
    </dialog>
  </icb-dialog>
</IcbTeleport>

<script src="../web-components/IcbDialog.ts"></script>
