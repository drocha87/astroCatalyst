---
import IcbTeleport from "./IcbTeleport.astro";

type Props = {
  // the selector used to find the element in the DOM
  activator: string;
  // the event we should listen to activate the dialog
  activatorEvent: string;

  deactivator: string;
  deactivatorEvent: string;
  // TODO: add option to disallow closing the dialog when clicking on the overlay
};

const { activator, activatorEvent, deactivator, deactivatorEvent } =
  Astro.props;
---

<IcbTeleport destination="body">
  <icb-dialog
    data-activator={activator}
    data-activator-event={activatorEvent}
    data-deactivator={deactivator}
    data-deactivator-event={deactivatorEvent}
    class="absolute top-0 left-0 right-0 bottom-0 z-50"
    style={{ display: "none" }}
  >
    <div
      data-target="icb-dialog.overlay"
      data-action="click:icb-dialog#dispose"
      class="bg-gray-200/50 flex justify-center items-center h-full"
    >
      <div
        data-target="icb-dialog.dialog"
        data-action="click:icb-dialog#handleContentClick"
        class="rounded-2xl max-w-lg bg-white p-8"
      >
        <slot name="header" />
        <slot />
        <slot name="footer" />
      </div>
    </div>
  </icb-dialog>
</IcbTeleport>

<script>
  import { attr, controller, target } from "@github/catalyst";

  @controller
  class IcbDialogElement extends HTMLElement {
    @target overlay: HTMLElement;
    @target dialog: HTMLElement;

    @attr activator = "";
    @attr activatorEvent = "click";
    @attr deactivator = "";
    @attr deactivatorEvent = "click";
    @attr show = false;

    #eventAbortController: AbortController | null = null;
    #deactivatorTarget: HTMLElement | null = null;

    connectedCallback() {
      const { signal } = (this.#eventAbortController = new AbortController());

      const activatorTarget = document.querySelector(this.activator);
      this.#deactivatorTarget = document.querySelector(this.deactivator);

      activatorTarget?.addEventListener(this.activatorEvent, this, { signal });
      this.#deactivatorTarget?.addEventListener(this.deactivatorEvent, this, {
        signal,
      });

      // TODO: add transition effect when showing or hiding the dialog
      // TODO: trap the focus inside the content when the dialog is open
      // TODO: enable disposing the dialog with the keyboard
    }

    disconnectedCallback() {
      this.#eventAbortController?.abort();
    }

    handleEvent(ev: Event) {
      // `handleEvent` will be called when each one of the event listeners
      // defined in `connectedCallback` is dispatched.

      // we are only listening to two elements so or it's the activator or the
      // deactivator
      if (ev.target === this.#deactivatorTarget) {
        this.dispose();
      } else {
        this.show = true;
      }
    }

    attributeChangedCallback() {
      // FIXME: only dispatch update if necessary
      this.update();
    }

    update() {
      this.style.display = this.show ? "block" : "none";
    }

    dispose() {
      this.show = false;
    }

    handleContentClick(ev: Event) {
      // as the content is inside the overlay we must stop the click event from
      // propagating since it can dispatch the dispose event
      ev.stopPropagation();
    }
  }
</script>
